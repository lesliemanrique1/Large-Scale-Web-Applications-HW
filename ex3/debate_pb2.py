# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: debate.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='debate.proto',
  package='debate',
  syntax='proto3',
  serialized_pb=_b('\n\x0c\x64\x65\x62\x61te.proto\x12\x06\x64\x65\x62\x61te\"!\n\rAnswerRequest\x12\x10\n\x08question\x18\x01 \x01(\t\"\x1d\n\x0b\x41nswerReply\x12\x0e\n\x06\x61nswer\x18\x01 \x01(\t\"3\n\x10\x45laborateRequest\x12\r\n\x05topic\x18\x01 \x01(\t\x12\x10\n\x08\x62lah_run\x18\x02 \x03(\x05\" \n\x0e\x45laborateReply\x12\x0e\n\x06\x61nswer\x18\x01 \x01(\t2\x84\x01\n\tCandidate\x12\x36\n\x06\x41nswer\x12\x15.debate.AnswerRequest\x1a\x13.debate.AnswerReply\"\x00\x12?\n\tElaborate\x12\x18.debate.ElaborateRequest\x1a\x16.debate.ElaborateReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_ANSWERREQUEST = _descriptor.Descriptor(
  name='AnswerRequest',
  full_name='debate.AnswerRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='question', full_name='debate.AnswerRequest.question', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=24,
  serialized_end=57,
)


_ANSWERREPLY = _descriptor.Descriptor(
  name='AnswerReply',
  full_name='debate.AnswerReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='answer', full_name='debate.AnswerReply.answer', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=59,
  serialized_end=88,
)


_ELABORATEREQUEST = _descriptor.Descriptor(
  name='ElaborateRequest',
  full_name='debate.ElaborateRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='topic', full_name='debate.ElaborateRequest.topic', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='blah_run', full_name='debate.ElaborateRequest.blah_run', index=1,
      number=2, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=90,
  serialized_end=141,
)


_ELABORATEREPLY = _descriptor.Descriptor(
  name='ElaborateReply',
  full_name='debate.ElaborateReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='answer', full_name='debate.ElaborateReply.answer', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=143,
  serialized_end=175,
)

DESCRIPTOR.message_types_by_name['AnswerRequest'] = _ANSWERREQUEST
DESCRIPTOR.message_types_by_name['AnswerReply'] = _ANSWERREPLY
DESCRIPTOR.message_types_by_name['ElaborateRequest'] = _ELABORATEREQUEST
DESCRIPTOR.message_types_by_name['ElaborateReply'] = _ELABORATEREPLY

AnswerRequest = _reflection.GeneratedProtocolMessageType('AnswerRequest', (_message.Message,), dict(
  DESCRIPTOR = _ANSWERREQUEST,
  __module__ = 'debate_pb2'
  # @@protoc_insertion_point(class_scope:debate.AnswerRequest)
  ))
_sym_db.RegisterMessage(AnswerRequest)

AnswerReply = _reflection.GeneratedProtocolMessageType('AnswerReply', (_message.Message,), dict(
  DESCRIPTOR = _ANSWERREPLY,
  __module__ = 'debate_pb2'
  # @@protoc_insertion_point(class_scope:debate.AnswerReply)
  ))
_sym_db.RegisterMessage(AnswerReply)

ElaborateRequest = _reflection.GeneratedProtocolMessageType('ElaborateRequest', (_message.Message,), dict(
  DESCRIPTOR = _ELABORATEREQUEST,
  __module__ = 'debate_pb2'
  # @@protoc_insertion_point(class_scope:debate.ElaborateRequest)
  ))
_sym_db.RegisterMessage(ElaborateRequest)

ElaborateReply = _reflection.GeneratedProtocolMessageType('ElaborateReply', (_message.Message,), dict(
  DESCRIPTOR = _ELABORATEREPLY,
  __module__ = 'debate_pb2'
  # @@protoc_insertion_point(class_scope:debate.ElaborateReply)
  ))
_sym_db.RegisterMessage(ElaborateReply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class CandidateStub(object):
  """Define a service called candiate 
  includes two asynchronous RPC methods
  1) Answer 

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Answer = channel.unary_unary(
        '/debate.Candidate/Answer',
        request_serializer=AnswerRequest.SerializeToString,
        response_deserializer=AnswerReply.FromString,
        )
    self.Elaborate = channel.unary_unary(
        '/debate.Candidate/Elaborate',
        request_serializer=ElaborateRequest.SerializeToString,
        response_deserializer=ElaborateReply.FromString,
        )


class CandidateServicer(object):
  """Define a service called candiate 
  includes two asynchronous RPC methods
  1) Answer 

  """

  def Answer(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Elaborate(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CandidateServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Answer': grpc.unary_unary_rpc_method_handler(
          servicer.Answer,
          request_deserializer=AnswerRequest.FromString,
          response_serializer=AnswerReply.SerializeToString,
      ),
      'Elaborate': grpc.unary_unary_rpc_method_handler(
          servicer.Elaborate,
          request_deserializer=ElaborateRequest.FromString,
          response_serializer=ElaborateReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'debate.Candidate', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaCandidateServicer(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  """Define a service called candiate 
  includes two asynchronous RPC methods
  1) Answer 

  """
  def Answer(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Elaborate(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaCandidateStub(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  """Define a service called candiate 
  includes two asynchronous RPC methods
  1) Answer 

  """
  def Answer(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Answer.future = None
  def Elaborate(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Elaborate.future = None


def beta_create_Candidate_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_deserializers = {
    ('debate.Candidate', 'Answer'): AnswerRequest.FromString,
    ('debate.Candidate', 'Elaborate'): ElaborateRequest.FromString,
  }
  response_serializers = {
    ('debate.Candidate', 'Answer'): AnswerReply.SerializeToString,
    ('debate.Candidate', 'Elaborate'): ElaborateReply.SerializeToString,
  }
  method_implementations = {
    ('debate.Candidate', 'Answer'): face_utilities.unary_unary_inline(servicer.Answer),
    ('debate.Candidate', 'Elaborate'): face_utilities.unary_unary_inline(servicer.Elaborate),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Candidate_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_serializers = {
    ('debate.Candidate', 'Answer'): AnswerRequest.SerializeToString,
    ('debate.Candidate', 'Elaborate'): ElaborateRequest.SerializeToString,
  }
  response_deserializers = {
    ('debate.Candidate', 'Answer'): AnswerReply.FromString,
    ('debate.Candidate', 'Elaborate'): ElaborateReply.FromString,
  }
  cardinalities = {
    'Answer': cardinality.Cardinality.UNARY_UNARY,
    'Elaborate': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'debate.Candidate', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
